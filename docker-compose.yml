version: '3.8'

services:
  ml-pipeline:
    build: .
    ports:
      - "8000:8000"
      - "8001:8001"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./static:/app/static
      - ./uploads:/app/uploads
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  ml-pipeline-replica1:
    build: .
    ports:
      - "8002:8000"
      - "8003:8001"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./static:/app/static
      - ./uploads:/app/uploads
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  ml-pipeline-replica2:
    build: .
    ports:
      - "8004:8000"
      - "8005:8001"
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./static:/app/static
      - ./uploads:/app/uploads
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - ml-pipeline
      - ml-pipeline-replica1
      - ml-pipeline-replica2
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
    restart: unless-stopped

volumes:
  grafana-storage: